shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(DT)
source("global.R", encoding = "utf-8")
library(reticulate)
source_python("cems_api.py")
# ui ----------------------------------------------------------------------
ui <- dashboardPage(skin = "green",
dashboardHeader(title = span("AQ  Doctor", style="font-family:Microsoft JhengHei; font-size:25px; font-weight:bold")),
dashboardSidebar(sidebarMenu(
menuItem(span("CEMS",style="font-family:Microsoft JhengHei; font-size:18px"), tabName = "cems", icon = icon("industry"), startExpanded = TRUE,
menuSubItem(span("CEMS table",style="font-family:Microsoft JhengHei; font-size:16px"), tabName = "subitem1"),
menuSubItem(span("CEMS chart",style="font-family:Microsoft JhengHei; font-size:16px"), tabName = "subitem2"))
)),
dashboardBody(
tabItems(
# First sub-content
tabItem(tabName = "subitem1",
fluidRow(tabBox(
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "850px", width = "12",
tabPanel("SOx", DT::dataTableOutput("cems_SOX")),
tabPanel("NOx", DT::dataTableOutput("cems_NOX"))
))),
tabItem("subitem2", selectInput("select", h3("select"),
choices = cems_metadata$cno, selected = 1),
box(title = "Histogram", status = "success", solidHeader = TRUE,
collapsible = TRUE, textOutput("selected_var"), height = "280px", width = "12"),
box(title = "Histogram", status = "success", solidHeader = TRUE,
collapsible = TRUE, plotlyOutput("NOplot"), height = "270px", width = "12")
))
))
# server ------------------------------------------------------------------
server <- function(input, output) {
# CEMS table
output$tabset1Selected <- output$cems_SOX <- DT::renderDataTable({
so_data
},options = list(searching = FALSE, pageLength = 15
),
callback=JS(
'table.on("click.dt", "tr", function() {
var x = document.getElementsByTagName("a")
for (i = 0; i < x.length; i++) {
if (x[i].getAttribute("data-value")=="subitem2") {
button = x[i]
button.click()
}
}
})'
))
output$tabset1Selected <- output$cems_NOX <- DT::renderDataTable({
no_data
},options = list(searching = FALSE, pageLength = 15
),
callback=JS(
'table.on("click.dt", "tr", function() {
tabs = $(".tabbable .nav.nav-tabs li a");
var data=table.row(this).data();
document.getElementById("select").value=data[1];
Shiny.onInputChange("select",input$select;
$(tabs[1]).click();
table.row(this).deselect();})'
))
# CEMS Line chart prepare
output$selected_var <- renderText({
paste("You have selected", input$select)
})
}
shinyApp(ui, server)
library(shiny)
library(DT)
ui <- fluidPage(
tabsetPanel(
tabPanel("One",
DT::dataTableOutput("test1")
),
tabPanel("two",
numericInput("length","Length",0,0,10)
)))
server <- function(input, output, session) {
df <- reactive({
cbind(seq_len(nrow(mtcars)),mtcars)
})
output$test1 <- DT::renderDataTable({
df()
},rownames=FALSE,options=list(dom="t"),
callback=JS(
'table.on("click.dt", "tr", function() {
tabs = $(".tabbable .nav.nav-tabs li a");
var data=table.row(this).data();
document.getElementById("length").value=data[0];
Shiny.onInputChange("length",data[0]);
$(tabs[1]).click();
table.row(this).deselect();})'
))
}
shinyApp(ui = ui, server = server)
list[0:10]
c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
},rownames=FALSE,options=list(dom="t"),
library(shiny)
library(DT)
ui <- fluidPage(
tabsetPanel(
tabPanel("One",
DT::dataTableOutput("test1")
),
tabPanel("two",
selectInput("select", h3("SELECT"),
choices = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), selected = 1)
)))
server <- function(input, output, session) {
df <- reactive({
cbind(seq_len(nrow(mtcars)),mtcars)
})
output$test1 <- DT::renderDataTable({
df()
},rownames=FALSE,options=list(dom="t"),
callback=JS(
'table.on("click.dt", "tr", function() {
tabs = $(".tabbable .nav.nav-tabs li a");
var data=table.row(this).data();
document.getElementById("length").value=data[0];
Shiny.onInputChange("length",data[0]);
$(tabs[1]).click();
table.row(this).deselect();})'
))
}
shinyApp(ui = ui, server = server)
shiny::runApp()
library(leaflet.minicharts)
library(htmltools)
library(leaflet)
library(dplyr)
library(rgdal)
library(data.table)
#call python file
library(scales)
library(reticulate)
source_python("cems_api.py")
#cems-table related
so_data <- Sox() %>% data.table()
no_data <- Nox() %>% data.table()
cems_metadata <- read.csv('data/cems_metadata.csv', fileEncoding =  "utf8")
choice.cno <- list(cems_metadata$cno)
# map-related
pm25_data <- readOGR('data/pm25/pm25_mean.shp', use_iconv = TRUE, encoding = "UTF-8")
industry_data <- readOGR('data/industry/industry.shp', use_iconv = TRUE, encoding = "UTF-8")
cemsFactory_data <- read.csv('data/cems_factory.csv', fileEncoding =  "utf8")
cems_factory <- cemsFactory_data %>% select("一般工廠", "監督工廠", longitude, latitude, towncode)
cf_dCols <- names(cems_factory)[1:2]
labels <- sprintf(
"<strong>%s</strong><br/>%g μg/m3<sup>2</sup>",
paste(pm25_data$countyname, pm25_data$townname), pm25_data$pm25
) %>% lapply(htmltools::HTML)
bins <- c(0, 11,23,35,41,47,53,58,64,70,Inf)
mycols<-c('#9dff9c','#31ff00','#31cf00','#ffff00','#ffcf00','#ff9a00','#fe6464','#fe0000','#990100','#ce30ff')
pal <- colorBin(mycols, domain = pm25_data$pm25, bins = bins)
pm25_map <- leaflet(pm25_data) %>%
addTiles("OpenStreetMap_DE") %>%
setView(lng = 121.084560, lat = 23.8, zoom = 8)%>%
addPolygons(data = pm25_data,
fillColor = ~pal(pm25),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))%>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
pm25_map
library(leaflet.minicharts)
library(htmltools)
library(leaflet)
library(dplyr)
library(rgdal)
library(data.table)
#call python file
library(scales)
library(reticulate)
source_python("cems_api.py")
#cems-table related
so_data <- Sox() %>% data.table()
no_data <- Nox() %>% data.table()
cems_metadata <- read.csv('data/cems_metadata.csv', fileEncoding =  "utf8")
choice.cno <- list(cems_metadata$cno)
# map-related
pm25_data <- readOGR('data/pm25/pm25_mean.shp', use_iconv = TRUE, encoding = "UTF-8")
industry_data <- readOGR('data/industry/industry.shp', use_iconv = TRUE, encoding = "UTF-8")
cemsFactory_data <- read.csv('data/cems_factory.csv', fileEncoding =  "utf8")
cems_factory <- cemsFactory_data %>% select("一般工廠", "監督工廠", longitude, latitude, towncode)
cf_dCols <- names(cems_factory)[1:2]
labels <- sprintf(
"<strong>%s</strong><br/>%g μg/m3<sup>2</sup>",
paste(pm25_data$countyname, pm25_data$townname), pm25_data$pm25
) %>% lapply(htmltools::HTML)
bins <- c(0, 11,23,35,41,47,53,58,64,70,Inf)
mycols<-c('#9dff9c','#31ff00','#31cf00','#ffff00','#ffcf00','#ff9a00','#fe6464','#fe0000','#990100','#ce30ff')
pal <- colorBin(mycols, domain = pm25_data$pm25, bins = bins)
pm25_map <- leaflet(pm25_data) %>%
addTiles("OpenStreetMap_DE") %>%
setView(lng = 121.084560, lat = 23.8, zoom = 8)%>%
addPolygons(data = pm25_data,
fillColor = ~pal(pm25),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))%>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
pm25_map
View(cems_metadata)
library(plotly)
library(dplyr)
library(shiny)
library(scales)
source("cems_api.py")
SO_table <- SOX("E5600056")
library(plotly)
library(dplyr)
library(shiny)
library(scales)
source("cems_api.py")
SO_table <- instant_24("E5600056") %>% subset(item == '922')
source("cems_api.py")
SO_table <- instant_24("E5600056") %>% subset(item == '922')
library(plotly)
library(dplyr)
library(shiny)
library(scales)
source_python("cems_api.py")
SO_table <- instant_24("E5600056") %>% subset(item == '922')
NO_table <- instant_24("E5600056") %>% subset(item == '923')
SO_table$polno <- as.factor(unlist(SO_table$polno))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_val, y = m_val, color=polno)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SONames, aes(x = m_time, y = value,color=variable)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
SO_table$polno <- as.factor(unlist(SO_table$polno))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = value,color=variable)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
View(SO_table)
SO_table$polno <- as.factor(unlist(SO_table$polno))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = value,color=variable)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
SO_table$polno <- as.factor(unlist(SO_table$polno))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = m_val,color=variable)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
View(SO_table)
SO_table$polno <- as.factor(unlist(SO_table$polno))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = m_val,color=variable)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
SO_table
library(plotly)
library(dplyr)
library(shiny)
library(scales)
source_python("cems_api.py")
SO_table <- instant_24("E5600056") %>% subset(item == '922')
NO_table <- instant_24("E5600056") %>% subset(item == '923')
SO_table$polno <- as.factor(unlist(SO_table$polno))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = m_val,color=variable)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
View(SO_table)
library(plotly)
library(dplyr)
library(shiny)
library(scales)
source_python("cems_api.py")
SO_table <- instant_24("E5600056") %>% subset(item == '922')
NO_table <- instant_24("E5600056") %>% subset(item == '923')
SO_table$polno <- as.factor(unlist(SO_table$polno))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = m_val,color=polno)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
NO_table$polno <- as.factor(unlist(NO_table$polno))
NO_table$m_time <-  as.POSIXct(NO_table$m_time, format="%Y/%m/%d %H:%M")
NO_ggplot<-ggplot(NO_table, aes(x = m_time, y = m_val,color=polno)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
NO_ggplot
SO_table <- instant_24("E5600896") %>% subset(item == '922')
NO_table <- instant_24("E5600896") %>% subset(item == '923')
SO_table$polSO <- as.factor(unlist(SO_table$polSO))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = m_val,color=polSO)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
SO_table$polSO <- as.factor(unlist(SO_table$polSO))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = m_val,color=polno)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
SO_table$polSO <- as.factor(unlist(SO_table$polSO))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = m_val,color=polno)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
SO_table$polSO <- as.factor(unlist(SO_table$polno))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = m_val,color=polno)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
SO_table$polno <- as.factor(unlist(SO_table$polno))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = m_val,color=polno)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
NO_table$polno <- as.factor(unlist(NO_table$polno))
NO_table$m_time <-  as.POSIXct(NO_table$m_time, format="%Y/%m/%d %H:%M")
NO_ggplot<-ggplot(NO_table, aes(x = m_time, y = m_val,color=polno)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
NO_ggplot
SO_table$polno <- as.factor(unlist(SO_table$polno))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = m_val,color=polno)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
NO_table$polno <- as.factor(unlist(NO_table$polno))
NO_table$m_time <-  as.POSIXct(NO_table$m_time, format="%Y/%m/%d %H:%M")
NO_ggplot<-ggplot(NO_table, aes(x = m_time, y = m_val,color=polno)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
NO_ggplot
SO_table <- instant_24("E5600850") %>% subset(item == '922')
NO_table <- instant_24("E5600850") %>% subset(item == '923')
NO_table$polno <- as.factor(unlist(NO_table$polno))
NO_table$m_time <-  as.POSIXct(NO_table$m_time, format="%Y/%m/%d %H:%M")
NO_ggplot<-ggplot(NO_table, aes(x = m_time, y = m_val,color=polno)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
NO_ggplot
SO_table$polno <- as.factor(unlist(SO_table$polno))
SO_table$polno <- as.factor(unlist(SO_table$polno))
SO_table$m_time <-  as.POSIXct(SO_table$m_time, format="%Y/%m/%d %H:%M")
SO_ggplot<-ggplot(SO_table, aes(x = m_time, y = m_val,color=polno)) +
geom_point() +
geom_line()+
theme_bw()+
labs(y="ppm")+
scale_x_datetime(date_labels="%m/%d %H:%M:%S")
SO_ggplot
View(NO_table)
View(SO_table)
#cems-table related
so_data <- Sox() %>% data.table()
library(leaflet.minicharts)
library(htmltools)
library(leaflet)
library(dplyr)
library(rgdal)
library(data.table)
#call python file
library(scales)
library(reticulate)
source_python("cems_api.py")
#cems-table related
so_data <- Sox() %>% data.table()
no_data <- Nox() %>% data.table()
View(NO_table)
View(no_data)
View(so_data)
shiny::runApp()
runApp()
runApp()
uninstall.packages("rgdal")
uninstall.packages(c("rgdal"))
library("anytime", lib.loc="~/R/win-library/3.3")
detach("package:anytime", unload=TRUE)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(no_data)
instant_24("Q7600375")
runApp()
View(so_data)
library(plotly)
library(dplyr)
library(shiny)
library(scales)
SOurce_python("cems_api.py")
library(reticulate)
SOurce_python("cems_api.py")
source_python("cems_api.py")
library(plotly)
library(dplyr)
library(shiny)
library(scales)
library(reticulate)
source_python("cems_api.py")
SO_table <- instant_24("E5600850") %>% subset(item == '922')
NO_table <- instant_24("E5600850") %>% subset(item == '923')
source_python("cems_api.py")
SO_table <- instant_24("E5600850") %>% subset(item == '922')
NO_table <- instant_24("E5600850") %>% subset(item == '923')
